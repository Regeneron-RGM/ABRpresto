from pathlib import Path


class BaseLoader:

    def iter_path(self, path):
        raise NotImplementedError

    def iter_experiments(self, path):
        raise NotImplementedError


class PSILoader(BaseLoader):
    BaseLoader._type = 'PSI'
    def iter_path(self, path):
        '''
        Recursively scans for all datasets under the specified path. A dataset
        typically contains ABR data for one or more frequencies.

        Parameters
        ----------
        path : {str, Path}
            Path to scan for dastasets.
        '''
        path = Path(path).absolute()
        if not path.is_dir():
            raise ValueError(f'{path} is not a directory')
        for filename in Path(path).glob('**/*abr_io/erp_metadata.csv'):
            yield filename.parent

    def iter_experiments(self, path):
        '''
        Iterate through experiments found in the dataset.

        This loader is designed to work with experiments saved in the cftsdata
        format generated by psiexperiment.

        Parameters
        ----------
        path : {str, Path}
            Path to experiment to load. Experiment must be in cftsdata format.

        Returns
        -------
        experimenents : generator
            The generator will yield tuples of frequency and epochs (i.e., ABR
            single trial data) for that frequency.
        '''
        from cftsdata import abr
        if not (path / 'erp_metadata.csv').exists():
            raise ValueError(f'{path} does not contain ABR data')
        fh = abr.load(path)
        epochs = fh.get_epochs_filtered()
        for freq, freq_df in epochs.groupby('frequency'):
            yield (freq, freq_df)
    def get_save_path(self, path):
        return path #Save results in folder of experiment


class CSVLoader(BaseLoader):
    BaseLoader._type = 'csv'
    def iter_path(self, path):
        '''
        Recursively scans for all datasets under the specified path. A dataset
        here is defined as a single CSV file. The example datasets provided
        with the ABRpresto git repo only contain a single frequency per
        dataset.

        Parameters
        ----------
        path : {str, Path}
            Path to scan for dastasets.
        '''
        path = Path(path).absolute()
        if not path.is_dir():
            raise ValueError(f'{path} is not a directory')
        yield from path.glob('**/*.csv')

    def iter_experiments(self, filename):
        '''
        Iterate through experiments found in the file

        This loader is designed to work with the example data provided with the
        ABRpresto git repository. Each CSV file only contains a single
        frequency and there is no frequency column.

        Parameters
        ----------
        filename : {str, Path}
            Filename to load.
        '''
        import pandas as pd
        try:
            epochs = pd.read_csv(filename, index_col=[0, 1, 2])
            epochs.columns.name = 'time'
            epochs.columns = epochs.columns.astype('float')
            yield None, epochs
        except:
            raise IOError(f'{filename} not a well-formatted ABR single-trial file')

    def get_save_path(self, path):
        return path.parent #Save results in parent directory of where csv is


LOADERS = {
    'psi': PSILoader(),
    'csv': CSVLoader()
}
